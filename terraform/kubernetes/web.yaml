apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      name: web
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: web
    spec:
      containers:
        - env:
            - name: DATABASE_URI
              value: postgresql://postgres:local@postgres:5432/postgres
            - name: DATABASE_URI_TEST
              value: postgresql://postgres:local@postgres-test:5432/postgres
          image: localhost:5001/web
          name: web
          ports:
            - containerPort: 5000
              protocol: TCP
          volumeMounts:
            - mountPath: /app
              name: web-cm0
      restartPolicy: Always
      volumes:
        - configMap:
            name: web-cm0
          name: web-cm0
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
  selector:
    name: web
---
apiVersion: v1
data:
  manage.py: |
    import os

    from app import create_app, db
    from app.models import Data

    env_name = os.getenv("FLASK_ENV", "development")
    app = create_app(env_name)


    with app.app_context():
        db.create_all()
        sample_data = Data(name="SQL Test User")
        if Data.query.first() is not None:
            print("Database tables are already created.")
            exit()
        db.session.add(sample_data)
        db.session.commit()

    print("Database tables created.")
  manage.sh: |
    #!/bin/bash

    python manage.py
    python run.py
  requirements.txt: |-
    Flask==3.1.0
    SQLAlchemy==2.0.36
    psycopg2-binary==2.9.10
    Flask-SQLAlchemy==3.1.1
    pytest==8.3.4
    pytest-flask==1.3.0
    pytest-cov==6.0.0
  run.py: |
    import os

    from app import create_app
    from app.config import config_dict

    env_name = os.getenv("FLASK_ENV", "development")
    app = create_app(env_name)

    if __name__ == "__main__":
        app.run(debug=config_dict[env_name].DEBUG, host="0.0.0.0")
  web_test.py: |
    import pytest
    from app import create_app, db

    @pytest.fixture
    def app():
    	return create_app("testing")

    @pytest.fixture
    def client(app):
    	with app.app_context():
    		db.create_all()
    	return app.test_client()

    def test_get(client):
    	response = client.get('/data')
    	assert response.status_code == 200
    	assert response.json == []

    def test_post(client):
    	response = client.post('/data', json={'name': 'test'})
    	assert response.status_code == 200
    	response = client.post('/data', json={'name': 'test1'})
    	assert response.status_code == 200
    	
    	response = client.post('/data', json={'name': 'test'})
    	assert response.status_code == 409

    def test_delete(client):
    	response = client.delete('/data/2')
    	assert response.status_code == 200
    	response = client.delete('/data/2')
    	assert response.status_code == 404

    def test_final_output(client):
    	response = client.get('/data')
    	assert response.status_code == 200
    	assert response.json == [{'id': 1, 'name': 'test'}]
kind: ConfigMap
metadata:
  labels:
    name: web
  name: web-cm0
